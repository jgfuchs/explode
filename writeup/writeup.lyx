#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\hypersetup{citecolor=blue,linkcolor=blue,urlcolor=blue}

\usepackage{sectsty}
\sectionfont{\fontsize{14}{15}\selectfont}
\subsectionfont{\normalsize}
% \setkeys{Gin}{width=\linewidth}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Simulating and Rendering Explosions on the GPU
\end_layout

\begin_layout Author
Julian Fuchs
\end_layout

\begin_layout Date
MIT 6.837 (Computer Graphics), Fall 2016
\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
It is apparently customary in the explosion simulation literature to begin
 by pointing out that real explosions are rarely encountered by most people.
 They are, however, ubiquitous in films and video games, and pose interesting
 simulation and rendering problems.
 Explosions combine fire and smoke, which are closely related but behave
 and appear very differently.
 They also combine small- and large-scale physical phenomena: the explosion
 itself happens very quickly in a relatively small region, while the resulting
 fireball and plume of smoke move much more slowly through a much larger
 space.
\end_layout

\begin_layout Standard
The reasons for the GPU-centric approach are twofold.
 First, modern GPUs can be literally thousands of times faster than CPUs
 for highly parallelizable workloads.
 Both the simulation and rendering steps are computationally intensive and
 
\begin_inset Quotes eld
\end_inset

embarrassingly parallel,
\begin_inset Quotes erd
\end_inset

 so 
\shape italic
not 
\shape default
implementing them on the GPU seems like it would be a wasted opportunity.
 Second and more personally, having worked at NVIDIA last summer on a project
 very far from the graphics layer, I was curious about working with GPUs
 from the user perspective.
\end_layout

\begin_layout Section
Previous work
\end_layout

\begin_layout Standard
Smoke and fire are both frequently written about in the computer graphics
 world, and fluid simulation in general is a very heavily-studied field.
 And the computer-aided modeling of explosions dates to the very origin
 of computers.
 Despite this, there are relatively few papers published specifically about
 explosions from a computer graphics perspective.
\end_layout

\begin_layout Standard
I read every paper I could find about explosions in graphics, and developed
 my implementation by combining ideas from several of them.
 I also drew from a few more general papers about fluids, smoke, and flames.
 Papers will be referenced where their ideas are used.
\end_layout

\begin_layout Section
Simulation
\end_layout

\begin_layout Subsection
Fluid model
\end_layout

\begin_layout Standard
This project takes the Eulerian approach to fluid simulation, storing the
 system's state on a regular three-dimensional grid.
 Each cell, or voxel, in the grid contains values for the various fluid
 properties (velocity, temperature, etc.).
 Since the fluid in question is a gas, there are no free surfaces, only
 fluid-solid boundaries.
 Solid objects are voxelized and represented directly on the grid.
\end_layout

\begin_layout Standard
To simplify simulation, air is modeled as an inviscid and incompressible
 fluid.
 While air does indeed have very low viscosity, it is not actually incompressibl
e, and its compressibility gives rise to effects like shockwaves that play
 an important part in the physics of real explosions.
 However, shockwaves are nearly invisible and for this project I chose to
 focus on more easily-visualized secondary effects like fire and smoke.
\end_layout

\begin_layout Standard
The behavior of an inviscid, incompressible fluid is governed by the Navier-Stok
es equations:
\begin_inset Formula 
\begin{align*}
\frac{\partial\mathbf{u}}{\partial t}+(\mathbf{u}\cdot\nabla)\mathbf{\mathbf{u}}+\nabla p=\mathbf{F}\\
\nabla\mathbf{u}=0
\end{align*}

\end_inset

where 
\begin_inset Formula $\mathbf{u}$
\end_inset

 is the velocity field, 
\begin_inset Formula $p$
\end_inset

 is the pressure field, and 
\begin_inset Formula $\mathbf{F}$
\end_inset

 represents all external forces such as gravity.
 The second equation states that the velocity field is divergence-free,
 which ensures incompressibility and mass conservation; both of those constraint
s will need to be loosened to simulate explosions.
\end_layout

\begin_layout Standard
To solve these equations, I used the advection-projection approach described
 by Stam in 
\begin_inset CommandInset citation
LatexCommand cite
key "Stam1999,Stam2003"

\end_inset

.
 Some useful implementation tips also came from 
\begin_inset CommandInset citation
LatexCommand cite
key "Bridson2007"

\end_inset

, particularly regarding discretization.
 The first core idea of this method is the semi-Lagrangian advection scheme,
 which updates a cell's values by tracing 
\begin_inset Formula $\mathbf{u}$
\end_inset

 backwards to a 
\begin_inset Quotes eld
\end_inset

start point
\begin_inset Quotes erd
\end_inset

 and then advecting forwards the interpolated values at that point.
 This is how temperature, smoke, fuel, and the velocity field itself are
 transported by the fluid's motion.
 The second idea is projection, which maintains the divergence-free property
 of 
\begin_inset Formula $\mathbf{u}$
\end_inset

; it relies on the fact that 
\begin_inset Formula $\mathbf{u}$
\end_inset

 can always be expressed as the sum of a divergence-free field and a gradient
 field (the Hodge decomposition).
 The advected velocity field 
\begin_inset Formula $\mathbf{w}$
\end_inset

 produced by the semi-Lagrangian method above will likely not be divergence-free
; to fix that, solve the equation 
\begin_inset Formula $\nabla^{2}p=\nabla\cdot\mathbf{w}$
\end_inset

 for pressure and compute a new divergence-free velocity 
\begin_inset Formula $\mathbf{u}'=\mathbf{w}-\nabla p$
\end_inset

.
 For a full derivation see 
\begin_inset CommandInset citation
LatexCommand cite
key "Stam1999"

\end_inset

.
\end_layout

\begin_layout Standard
The pressure-solving step is by far the most computationally-intensive,
 taking around 80% of the time spent simulating (i.e., not rendering).
 I use the Jacobi iterative method, which is neither the fastest nor the
 most accurate, but is quite simple and usually good enough.
 Given more time I would have liked to switch to a preconditioned conjugate
 gradient method as in 
\begin_inset CommandInset citation
LatexCommand cite
key "Bolz2003"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "Bridson2007"

\end_inset

.
\end_layout

\begin_layout Standard
The advantages of this advection-projection method are that it is relatively
 straightforward to implement, even on a GPU, and that it is unconditionally
 stable, avoiding any unwanted 
\begin_inset Quotes eld
\end_inset

explosions
\begin_inset Quotes erd
\end_inset

.
 One disadvantage is that it leads to numerical dissipation, a gradual damping
 and fading of the fluid's fields.
 This can actually be useful in some cases â€“ it diffuses smoke and heat
 without having to explicitly model that process.
 However, it also results in much smoother smoke plumes than one would expect
 from an explosion.
 To add some turbulence back in, I implemented vorticity confinement, as
 first described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Fedkiw2001"

\end_inset

: first find the vorticity field 
\begin_inset Formula $\omega=\nabla\times\mathbf{u}$
\end_inset

 and compute 
\begin_inset Formula $\eta=\nabla|w|$
\end_inset

 and 
\begin_inset Formula $\mathbf{N}=\eta/|\eta|$
\end_inset

.
 Then the vorticity confinement force (added to the 
\begin_inset Formula $\mathbf{F}$
\end_inset

 component of the Navier-Stokes equation) is:
\begin_inset Formula 
\[
\mathbf{f}_{vc}=\epsilon h(\mathbf{N}\times\omega)
\]

\end_inset

where 
\begin_inset Formula $\epsilon>0$
\end_inset

 is an adjustable parameter and 
\begin_inset Formula $h$
\end_inset

 is the cell side length.
 Values of 
\begin_inset Formula $\epsilon$
\end_inset

 from roughly 5 to 10 result in good-looking swirly structures in the smoke;
 higher values result in noisier but probably more realistic plumes.
\end_layout

\begin_layout Subsection
Combustion model
\end_layout

\begin_layout Standard
As explained above, the fluid model does not support shockwaves, so the
 simulated explosions are deflagrations rather than detonations (that is,
 combustion is propagated by heat transfer rather than by a shock front).
 This kind of explosion includes both liquid/vapor explosions (e.g., gasoline,
 natural gas) and 
\begin_inset Quotes eld
\end_inset

suspended particle
\begin_inset Quotes erd
\end_inset

 explosions (e.g., coal, sawdust) as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Feldman2003"

\end_inset

.
\end_layout

\begin_layout Standard
The heat and combustion model is similar to the one in 
\begin_inset CommandInset citation
LatexCommand cite
key "Kwatra2010"

\end_inset

.
 Each cell contains a mixture of air, fuel, and smoke.
 Air is the default and its amount is not stored explicitly.
 Fuel, when not burning, has no effect on the dynamics of the fluid.
 Smoke is heavier than air and slowly sinks, though that force is usually
 countered by buoyancy (a force applied to each cell proportional to how
 much hotter it is than the ambient temperature).
 Lastly, cooling is simulated using a physically derived equation found
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "Nguyen2002"

\end_inset

:
\begin_inset Formula 
\[
T'=T-c_{t}\left(\frac{T-T_{amb}}{T_{max}-T_{amb}}\right)^{4}
\]

\end_inset

where 
\begin_inset Formula $c_{t}$
\end_inset

 is the cooling constant, 
\begin_inset Formula $T_{amb}$
\end_inset

 is the ambient temperature, and 
\begin_inset Formula $T_{max}$
\end_inset

 is an arbitrarily-chosen maximum temperature (6000K in the simulation).
\end_layout

\begin_layout Standard
Combustion occurs if a cell contains fuel and has a temperature above the
 ignition point (set to 500K, just below the autoignition point of gasoline).
 Fuel burns at a fixed rate and produces a proportional amount of smoke
 and heat.
 To mimic the rapid gas expansion caused by real combustion, I use the technique
 introduced in 
\begin_inset CommandInset citation
LatexCommand cite
key "Feldman2003"

\end_inset

: a combusting cell has its divergence artificially augmented by an amount
 proportional to the fuel consumed; that is, instead of solving 
\begin_inset Formula $\nabla\mathbf{u}=0$
\end_inset

, the projection step will solve for 
\begin_inset Formula $\nabla\mathbf{u}=\phi$
\end_inset

, where 
\begin_inset Formula $\phi$
\end_inset

 is the extra divergence.
 The rates of fuel consumption and heat, smoke, and divergence production
 are configurable parameters whose values significantly affect the behavior
 of the explosion, with the divergence rate acting as a sort of 
\begin_inset Quotes eld
\end_inset

explosiveness
\begin_inset Quotes erd
\end_inset

 factor.
\end_layout

\begin_layout Standard
The results of this method, despite the essentially non-physical explosion
 mechanism, are quite impressive.
 An explosion can be created by adding a region of concentrated fuel with
 a high-temperature region in the center.
 The explosion expands rapidly, consuming all the fuel in a fraction of
 a second and producing a large amount of hot smoke.
 As the smoke cools and rises, it forms a realistic-looking plume, which
 through careful choice of parameters can even be made to resemble a mushroom
 cloud.
\end_layout

\begin_layout Section
Rendering
\end_layout

\begin_layout Standard
The renderer uses a volumetric ray casting method derived mainly from 
\begin_inset CommandInset citation
LatexCommand cite
key "Fedkiw2001"

\end_inset

.
 A more complex photon-mapping renderer that accounts for internal scattering
 is also presented in 
\begin_inset CommandInset citation
LatexCommand cite
key "Fedkiw2001"

\end_inset

, but is unnecessary for the low-albedo smoke dealt with here.
 For emission-related details and general implementation techniques, I also
 referred to 
\begin_inset CommandInset citation
LatexCommand cite
key "Wrenninge2010"

\end_inset

.
\end_layout

\begin_layout Standard
First, the renderer casts a ray from the eye through each pixel of the image
 plane.
 Then, starting at the intersection with the bounding cube, it marches along
 the ray, sampling the voxel grid at equidistant points.
 The step size is 
\begin_inset Formula $\sqrt{3}/n_{steps}$
\end_inset

, with 
\begin_inset Formula $n_{steps}$
\end_inset

 typically set to double the grid side length and 
\begin_inset Formula $\sqrt{3}$
\end_inset

 being the length of the cube's diagonal.
\end_layout

\begin_layout Standard
Each ray keeps track of a transmittance value 
\begin_inset Formula $t$
\end_inset

 as it progresses through the grid.
 At each cell, 
\begin_inset Formula $t$
\end_inset

 is reduced slightly in order to account for the absorption and scattering
 of light.
 The new value is 
\begin_inset Formula $t'=(1-\rho\sigma)t$
\end_inset

, where 
\begin_inset Formula $\rho$
\end_inset

 is the density of smoke in the cell and 
\begin_inset Formula $\sigma$
\end_inset

 is a constant describing the absorbance of the smoke.
 When 
\begin_inset Formula $t$
\end_inset

 falls below a threshold, the ray terminates early â€“ anything farther along
 would be completely occluded by the smoke in front of it.
\end_layout

\begin_layout Standard
To determine the amount of light entering each cell, the renderer also traces
 rays from each cell towards a point light source.
 The incident-light value 
\shape italic

\begin_inset Formula $L_{i}$
\end_inset


\shape default
 of the cell is set to the light source's intensity scaled by the transmittance
 of this secondary ray.
 This allows the smoke to both shadow itself and cast shadows on any solid
 objects in the scene.
 Since the transmittance is a value in the range 
\begin_inset Formula $[0,1]$
\end_inset

, the shadows have dark and light regions depending on the thickness of
 the smoke, as one would expect.
 (For efficiency, these secondary rays are only sent from cells that actually
 contain smoke.)
\end_layout

\begin_layout Standard
Each cell can also emit light with color and intensity determined by blackbody
 radiation.
 For a blackbody at temperature 
\begin_inset Formula $T$
\end_inset

, the emitted spectral radiance of wavelength 
\begin_inset Formula $\lambda$
\end_inset

 is given by Planck's law:
\begin_inset Formula 
\[
L(\lambda,T)=\frac{C_{1}}{\lambda^{5}(e^{C_{2}/(\lambda T)}-1)}
\]

\end_inset

where 
\begin_inset Formula $C_{1}\approx3.7418\cdot10^{-16}\,Wm^{2}$
\end_inset

 and 
\begin_inset Formula $C_{2}\approx1.4388\cdot10^{-2}\,mK$
\end_inset

.
 A lookup table mapping temperature to color is precomputed during initializatio
n by sampling temperature values at regular intervals from 0 to 
\begin_inset Formula $t_{max}$
\end_inset

, then for each temperature, integrating the equation above against the
 CIE color-matching functions over the visible wavelengths (380 to 780 nm).
 The resulting XYZ tristimulus values are converted to RGB by normalizing
 them so that the brightest color has the value 1, then multiplying by the
 relevant 3x3 matrix.
 The light intensity is computed and stored as a fourth color component.
 During rendering, the light 
\begin_inset Formula $L_{e}$
\end_inset

 emitted by a cell is calculated by linearly interpolating the two colors
 nearest to the cell's temperature and scaling by the intensity.
\end_layout

\begin_layout Standard
The overall light sent back to the eye from a cell is 
\begin_inset Formula $L_{o}=(L_{i}+L_{e})t$
\end_inset

, and the total light accumulated along a ray is the sum of that formula
 for all intersected cells.
 This captures how more obscured cells contribute less to the final output
 color.
\end_layout

\begin_layout Standard
Lastly, solid objects are rendered as perfectly diffuse surfaces using Lambertia
n reflectance, which is not particularly interesting, but solids are not
 the point of this renderer.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
The simulation and rendering code are written in OpenCL and run entirely
 on the GPU.
 The choice of OpenCL instead of CUDA was made for me by the fact that I
 had no NVIDIA GPUs on which to develop.
 And moreover, this way the code should run on any GPU brand.
 The CPU-side code, written in C++, is mainly responsible for some setup
 procedures â€“ reading the config file, setting up the OpenCL context, allocating
 but not filling blocks of video memory â€“ and periodically enqueuing commands
 to the GPU.
 It also saves the rendered images to disk as PNG files.
 Because the state buffers are initialized by OpenCL code and never copied
 back to the CPU side, there are essentially no significant memory transfers
 apart from the output images.
\end_layout

\begin_layout Standard
All the code, along with a number of config files describing various scenes,
 are available on GitHub: 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/jgfuchs/explode"

\end_inset

.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
Unfortunately, the only GPU that I had access to during this project was
 the Intel integrated chip in my three-year-old laptop.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Currently waiting on an Amazon AWS support ticket to let me launch GPU instances
 on EC2.
\end_layout

\end_inset

 Though still providing several orders of magnitude more computational power
 than the CPU, it was not able to run the code any faster than a few frames
 per second (on a 128x128x128 grid with 256 samples per ray).
 Due to the highly parallelizable nature of every step, I believe that performan
ce would scale up very well on more powerful GPUs.
 Back-of-the-envelope calculations suggest it could reach real-time performance
 on an NVIDIA GTX 1070 or similar device.
\end_layout

\begin_layout Standard
A compilation of videos produced by running the simulation on a number of
 scenes with varying objects and parameters can be found here: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.youtube.com/watch?v=Jx933hGdaI4"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "refs"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
